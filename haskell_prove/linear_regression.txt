module Main where

import LinearRegression (Point2D, linearRegression)

-- Read a list of space-separated points from user input
readPoints :: IO [Point2D]
readPoints = do
  putStrLn "Enter the dataset in the format 'x1 y1 x2 y2 ... xn yn':"
  input <- getLine
  let coordinates = map read $ words input
  let points = makePoints coordinates
  if length points < 2
    then do
      putStrLn "At least two points are required for linear regression."
      readPoints
    else return points

-- Convert a list of Doubles to a list of Point2D
makePoints :: [Double] -> [Point2D]
makePoints [] = []
makePoints (x:y:rest) = Point2D x y : makePoints rest
makePoints _ = error "Invalid number of coordinates."

-- Read a single point to evaluate from user input
readPointToEvaluate :: IO Point2D
readPointToEvaluate = do
  putStrLn "Enter the point to evaluate in the format 'x y':"
  input <- getLine
  let [x, y] = map read $ words input
  return $ Point2D x y

-- Evaluate the linear regression at the given point
evaluatePoint :: Point2D -> (Double, Double) -> Double
evaluatePoint (Point2D x _) (slope, intercept) = slope * x + intercept

main :: IO ()
main = do
  points <- readPoints
  pointToEvaluate <- readPointToEvaluate

  let (slope, intercept) = linearRegression points
  let result = evaluatePoint pointToEvaluate (slope, intercept)

  putStrLn $ "Best-fitting line: y = " ++ show slope ++ "x + " ++ show intercept
  putStrLn $ "Evaluated point (" ++ show (xCoord pointToEvaluate) ++ "): " ++ show result
